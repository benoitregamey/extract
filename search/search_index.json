{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#what-is-extract","title":"What is Extract ?","text":"Extract is a web application that facilitates the extraction and delivery of your geodata ! <p>The Extract application imports data requests from a platform or data portal (such as the ASIT portals viageo.ch and plans-reseaux.ch), then executes a series of pre-configured tasks to extract the requested data, then returns the given result back to the client. </p> <p>And all of that with or without human intervention, you choose it !</p>"},{"location":"#key-features","title":"Key features","text":"<ul> <li> Automate the process of extracting, transforming and delivering your geodata</li> <li> reduce order processing times</li> <li> increase delivered data quality</li> <li> increase customer satisfaction</li> </ul>"},{"location":"#open-source-project","title":"Open Source project","text":"<p>Extract is a modular and extensible web application, to be installed in the IT environment of each data provider, and can be accessed with a web browser.</p> <p> </p>"},{"location":"extract-connector-sample/","title":"Extract - Initialiser un nouveau plugin de connecteur","text":""},{"location":"extract-connector-sample/#introduction","title":"Introduction","text":"<p>Ce module java est un exemple de plugin de connecteur qui peut \u00eatre utilis\u00e9 pour initialiser un nouveau plugin pour le projet Extract. Le code source est document\u00e9 et permet d'avoir les indications n\u00e9cessaires pour d\u00e9velopper un nouveau plugin, Il peut \u00eatre import\u00e9 dans un nouveau environnement Java, des adaptations sont cependant n\u00e9cessaires selon le fonctionnement attendu.</p>"},{"location":"extract-connector-sample/#pre-requis-pour-lutilisation","title":"Pr\u00e9-requis pour l'utilisation","text":"<ul> <li>OS 64 bits</li> <li>Java 17</li> <li>Tomcat 9</li> </ul>"},{"location":"extract-connector-sample/#pre-requis-pour-le-developpement-et-la-compilation","title":"Pr\u00e9-requis pour le d\u00e9veloppement et la compilation","text":"<ul> <li>Java 17</li> <li>Yarn</li> <li>Projet extract-interface (Interface commune pour l'utilisation des plugins connecteurs et t\u00e2ches)</li> </ul>"},{"location":"extract-connector-sample/#initialisation-du-nouveau-plugin-de-connecteur","title":"Initialisation du nouveau plugin de connecteur.","text":"<p>Le projet doit \u00eatre un module Java. \\ Le projet du nouveau plugin doit d\u00e9finir une d\u00e9pendance vers le projet extract-interface.\\ Les d\u00e9pendances requises sont d\u00e9finies dans le fichier pom.xml.</p> <p>Pour initialiser un nouveau plugin, suivre les \u00e9tapes dans l'ordre : 1. Copier le code du plugin extract-connector-sample vers un workspace java. Le syst\u00e8me propose demande de d\u00e9finir un    nouveau nom.  Si ce n'est pas le cas, utiliser le menu contextuel (clic droit) <code>Refactor &gt; Rename</code></p> <ol> <li> <p>Editer le fichier pom.xml du module, remplacer les occurences de <code>extrat-connector-sample</code> par le nouveau nom du plugin.    Apr\u00e8s un clic droit sur le fichier, choisir l'option <code>Add as Maven Project</code></p> </li> <li> <p>Apr\u00e8s un clic droit sur l'espace de nom <code>ch.asit_asso.extract.connectors.sample</code>, choisir le menu <code>Refactor &gt; Rename</code>.    Saisir le nom de la nouvelle classe permettant d'identifier le plugin. Si l'interface le demande, cliquer sur le bouton    <code>Add in current Module</code> afin d'appliquer les changements sur le mode uniquement.    Cela aura pour effet de modifier automatiquement le nom du package dans tous les fichiers du module.</p> </li> <li> <p>Apr\u00e8s un clic droit sur le fichier SampleConnector.java, choisir le menu <code>Refactor &gt; Rename</code> puis saisir le nom    de la nouvelle classe principale du plugin (e.g EasySDIv4). Cela aura pour effet de renommer le fichier et de modifer    toutes les r\u00e9f\u00e9rences \u00e0 cette classe partout o\u00f9 elle est utilis\u00e9e.</p> </li> <li> <p>Editer le fichier LocalizedMessages.java : ajuster la valeur du param\u00e8tre LOCALIZED_FILE_PATH_FORMAT qui    correspond au chemin vers le r\u00e9pertoire <code>lang</code></p> </li> <li> <p>v\u00e9rifier le fichier module-info.java en particulier la r\u00e9f\u00e9rence \u00e0 <code>SampleConnector</code>. V\u00e9rifier \u00e9galement la ligne 4    de ce fichier (r\u00e9f\u00e9rence \u00e0 l'espace de nom <code>ch.asit_asso.extract.connectors.sample</code>)</p> </li> <li> <p>V\u00e9rifier le fichier resources\\META-INF\\services\\ch.asit_asso.extract.connectors.common.IConnector  en particulier la coh\u00e9rence de la classe <code>ch.asit_asso.extract.connectors.sample.SampleConnector</code></p> </li> <li> <p>Apr\u00e8s un clic droit sur le dossier resources\\connectors\\sample, choisir le menu <code>Refactor &gt; Rename</code>. Saisir    le nouveau nom</p> </li> <li> <p>Editer le fichier resources\\connectors\\\\lang\\fr\\messages.properties. Modifier ou     ajouter les libell\u00e9s qui seront utilis\u00e9s par le code source du plugin. Cette \u00e9tape peut se faire     de mani\u00e8re progressive pendant le d\u00e9veloppement <li> <p>Editer le fichier resources\\connectors\\\\properties\\config.properties. Ce ficher contient les     param\u00e8tres de configuration du plugn utilis\u00e9s par le code source. Cette \u00e9tape peut se faire     de mani\u00e8re progressive pendant le d\u00e9veloppement <li> <p>Le dossier resources\\connectors\\\\templates contient des mod\u00e8les XML utilis\u00e9s par le connecteur. N\u00e9anmoins, ils sont sp\u00e9cifiques au connecteur EasySDIv4, le format XML est en effet utilis\u00e9s comme format d'\u00e9change  pour les commandes. Ces fichiers ne serviront sans doute pas pour d'autres types de connecteurs."},{"location":"extract-connector-sample/#points-important-a-prendre-en-compte-pendant-le-developpement","title":"Points important \u00e0 prendre en compte pendant le d\u00e9veloppement","text":"<p>Le code source est suffisamment comment\u00e9 afin d'aider le d\u00e9veloppeur \u00e0 d\u00e9velopper le nouveau plugin. Les commentaires en MAJUSCULE permettent d'identifer les parties de code ou les fonctions importantes \u00e0 mettre \u00e0 jour.</p> <p>Il est notamment recommand\u00e9 d'apporter les modifications suivantes dans la class Connector : * Ajuster si besoin la variable <code>CONFIG_FILE_PATH</code> * Modifier la valeur du param\u00e8tre <code>code</code> par une valeur permettant d'identifier le plugin (e.g <code>EasySDIv4</code>)</p> <p>Ensuite, les fonctions \u00e0 adapter sont celles qui surchargent les fonctions de l'interface IConnector : * <code>getParams</code> pour d\u00e9finir les param\u00e8tres du connecteur. Cette m\u00e9thode retourne les param\u00e8tres   du plugin sous forme de tableau au format JSON. Si le plugin n\u2019accepte pas de param\u00e8tres, renvoyer un tableau vide * <code>importCommands</code> qui permet de g\u00e9rer l'import des commandes effectu\u00e9s par le serveur distant * <code>exportResult</code> qui permet de g\u00e9rer l'envoi du traitement d'une commande vers le serveur qui l'a produite</p> <p>Les fonctions priv\u00e9es dans le code permettent de r\u00e9aliser des traitements utilitaires ou de traiter les donn\u00e9es re\u00e7ues. Ces fonctions peuvent \u00eatre addapt\u00e9es ou supprim\u00e9es selon le besoin. Ces fonctions sont bien identifi\u00e9es dans le code de la classe Connector.</p>"},{"location":"extract-connector-sample/#installation-ou-mise-a-jour-du-plugin-dans-extract","title":"Installation ou mise \u00e0 jour du plugin dans EXTRACT","text":"<p>Avant de compiler le connecteur, supprimer le dossier target.\\ D\u00e8s que le connecteur est compil\u00e9 et que le fichier jar est g\u00e9n\u00e9r\u00e9, il suffit de placer le JAR dans le r\u00e9pertoire WEB-INF/classes/connectors de l\u2019application (contenant tous les plugins de connecteurs).\\ En cas de mise \u00e0 jour, il convient de supprimer le WAR de l\u2019ancienne version afin d\u2019\u00e9viter des conflits.</p> <pre><code>Le red\u00e9marrage de l\u2019application Tomcat EXTRACT est ensuite requis afin que la \nmodification des connecteurs soit prise en compte.\n</code></pre>"},{"location":"extract-task-sample/","title":"Extract - Initialiser un nouveau plugin de t\u00e2che","text":""},{"location":"extract-task-sample/#introduction","title":"Introduction","text":"<p>Ce module java est un exemple de plugin de t\u00e2che qui peut \u00eatre utilis\u00e9 pour initialiser un nouveau  plugin pour le projet Extract.  Le code source est document\u00e9 et permet d'avoir les indications n\u00e9cessaires pour d\u00e9velopper un nouveau plugin, Il peut \u00eatre import\u00e9 dans un nouveau environnement Java, des adaptations sont cependant n\u00e9cessaires selon le fonctionnement attendu.</p>"},{"location":"extract-task-sample/#pre-requis-pour-lutilisation","title":"Pr\u00e9-requis pour l'utilisation","text":"<ul> <li>OS 64 bits</li> <li>Java 17</li> <li>Tomcat 9</li> </ul>"},{"location":"extract-task-sample/#pre-requis-pour-le-developpement-et-la-compilation","title":"Pr\u00e9-requis pour le d\u00e9veloppement et la compilation","text":"<ul> <li>Java 17</li> <li>Yarn</li> <li>Projet extract-interface (Interface commune pour l'utilisation des plugins connecteurs et t\u00e2ches)</li> </ul>"},{"location":"extract-task-sample/#initialisation-du-nouveau-plugin-de-tache","title":"Initialisation du nouveau plugin de t\u00e2che.","text":"<p>Le projet doit \u00eatre un module Java. \\ Le projet du nouveau plugin doit d\u00e9finir une d\u00e9pendance vers le projet extract-interface.\\ Les d\u00e9pendances requises sont d\u00e9finies dans le fichier pom.xml.</p> <p>Pour initialiser un nouveau plugin, suivre les \u00e9tapes dans l'ordre : 1. Copier le cde du plugin extract-task-sample vers un workspace java. Le syst\u00e8me propose demande de d\u00e9finir un  nouveau nom.  Si ce n'est pas le cas, utiliser le menu contextuel (clic droit) <code>Refactor &gt; Rename</code></p> <ol> <li> <p>Editer le fichier pom.xml du module, remplacer les occurences de <code>extrat-task-sample</code> par le nouveau nom du plugin. Apr\u00e8s un clic droit sur le fichier, choisir l'option <code>Add as Maven Project</code></p> </li> <li> <p>Apr\u00e8s un clic droit sur l'espace de nom <code>ch.asit_asso.extract.plugins.sample</code>, choisir le menu <code>Refactor &gt; Rename</code>. Saisir le nom de la nouvelle classe permettant d'identifier le plugin. Si l'interface le demande, cliquer sur le bouton  <code>Add in current Module</code> afin d'appliquer les changements sur le mode uniquement. Cela aura pour effet de modifier automatiquement le nom du package dans tous les fichiers du module.</p> </li> <li> <p>Apr\u00e8s un clic droit sur le fichier SamplePlugin.java, choisir le menu <code>Refactor &gt; Rename</code> puis saisir le nom  de la nouvelle classe principale du plugin. Cela aura pour effet de renommer le fichier et de modifer  toutes les r\u00e9f\u00e9rences \u00e0 cette classe partout o\u00f9 elle est utilis\u00e9e. </p> </li> <li> <p>Refaire l'op\u00e9ration 4 pour les fichiers SampleRequest.java et SampleResult.java</p> </li> <li> <p>Editer le fichier LocalizedMessages.java : ajuster la valeur du param\u00e8tre LOCALIZED_FILE_PATH_FORMAT qui  correspond au chemin vers le r\u00e9pertoire <code>lang</code></p> </li> <li> <p>V\u00e9rifier le fichier module-info.java en particulier la r\u00e9f\u00e9rence \u00e0 <code>SamplePlugin</code>. V\u00e9rifier  \u00e9galement la ligne 4 de ce fichier (r\u00e9f\u00e9rence \u00e0 l'espace de nom <code>ch.asit_asso.extract.plugins.sample</code>)</p> </li> <li> <p>V\u00e9rifier le fichier resources\\META-INF\\services\\ch.asit_asso.extract.plugins.common.ITaskProcessor : en particulier  la coh\u00e9rence de  la classe <code>ch.asit_asso.extract.plugins.sample.SamplePlugin</code> </p> </li> <li> <p>Apr\u00e8s un clic droit sur le dossier resources\\plugins\\sample, choisir le menu <code>Refactor &gt; Rename</code>. Saisir  le nouveau nom</p> </li> <li> <p>Editer le fichier resources\\plugins\\\\lang\\fr\\messages.properties. Modifier ou ajouter les libell\u00e9s qui seront utilis\u00e9s par le code source du plugin. Cette \u00e9tape peut se faire  de mani\u00e8re progressive pendant le d\u00e9veloppement <li> <p>Editer le fichier resources\\plugins\\\\lang\\fr\\help.html afin d'y d\u00e9crire le focntionnement du plugin. Le contenu de fichier est au format HTML <li> <p>Editer le fichier resources\\plugins\\\\properties\\config.properties. Ce ficher contient les param\u00e8tres de configuration du plugn utilis\u00e9s par le code source. Cette \u00e9tape peut se faire de mani\u00e8re progressive pendant le d\u00e9veloppement"},{"location":"extract-task-sample/#points-important-a-prendre-en-compte-pendant-le-developpement","title":"Points important \u00e0 prendre en compte pendant le d\u00e9veloppement","text":"<p>Le code source est suffisamment comment\u00e9 afin d'aider le d\u00e9veloppeur \u00e0 d\u00e9velopper le  nouveau plugin. Les commentaires en MAJUSCULE permettent d'identifer les parties de code ou les fonctions  importantes \u00e0 mettre \u00e0 jour.</p> <p>Il est notamment recommand\u00e9 d'apporter les modifications suivantes dans la class Plugin: * Ajuster si besoin la variable <code>CONFIG_FILE_PATH</code> * Modifier la valeur du param\u00e8tre <code>code</code> par une valeur permettant d'identifier le plugin (e.g <code>remark</code> ou <code>fmeserver</code>) * Changer la valeur du param\u00e8tre pictoClass par un nom de classe CSS appropri\u00e9 (image du logo du plugin). Chercher  une ic\u00f4ne sur le site Font Awesome</p> <p>Ensuite, les fonctions \u00e0 adapter sont celles qui surchargent les fonctions de l'interface  ITaskProcessor : * <code>getParams</code> pour d\u00e9finir les param\u00e8tres du connecteur. Cette m\u00e9thode retourne les param\u00e8tres  du plugin sous forme de tableau au format JSON. Si le plugin n\u2019accepte pas de param\u00e8tres, renvoyer un tableau vide * <code>execute</code> qui permet de g\u00e9rer l'ex\u00e9cution du plugin</p>"},{"location":"extract-task-sample/#installation-ou-mise-a-jour-du-plugin-dans-extract","title":"Installation ou mise \u00e0 jour du plugin dans EXTRACT","text":"<p>Avant de compiler le plugin, supprimer le dossier target.\\ D\u00e8s que le plugin est compil\u00e9 et que le fichier jar est g\u00e9n\u00e9r\u00e9, il suffit de placer le JAR dans le r\u00e9pertoire WEB-INF/classes/task_processors de l\u2019application  (contenant tous les plugins de t\u00e2ches).\\ En cas de mise \u00e0 jour, il convient de supprimer le WAR de l\u2019ancienne version afin d\u2019\u00e9viter des conflits.</p> <pre><code>Le red\u00e9marrage de l\u2019application Tomcat EXTRACT est ensuite requis afin que la \nmodification des plugins soit prise en compte.\n</code></pre>"},{"location":"features/extract-viageo/","title":"Connect Extract to viageo.ch","text":""},{"location":"getting-started/configure/","title":"Configure","text":""},{"location":"getting-started/configure/#application-settings","title":"Application settings","text":"<p>Info</p> <p>The global application settings are found in the <code>application.settings</code> file at the root of the <code>WEB-INF\\classes</code> folder. Changes are taken into account when the Tomcat Extract application is restarted.</p> <p>application.external.url URL to access the application. This value is used to generate links in notification e-mails.</p> <p>database.encryption.secret Random 32-character ISO-8859-1 string used as key to encrypt certain database values.</p> <p>database.encryption.salt Random 32-character ISO-8859-1 string used as \"salt\" to encrypt certain database values.</p> <p>email.templates.cache Boolean value defining whether email notification templates should be cached.</p> <p>email.templates.encoding Encoding used by email notification templates</p> <p>email.templates.path Relative path to directory containing email notification templates. If the path is relative to the <code>WEB-INF/classes</code> directory, it must be prefixed with <code>classpath:/</code>.</p> <p>extract.i18n.language Language code used by the application. A directory with the same name containing the application's language files must exist in the <code>WEB-INF/classes/static/lang</code> directory. If this is not the case, you can add a new language (see Add a new language section).</p> <p>http.proxyHost Server name to be used as proxy for external connections. This property can be omitted if no proxy is used.</p> <p>http.proxyPassword Password used to log in to the proxy server. This property can be omitted if no proxy is used or if it does not require authentication.</p> <p>http.proxyPort HTTP port of proxy server. This property can be omitted if no proxy is used.</p> <p>http.proxyUser Username used to log in to the proxy server. This property can be omitted if no proxy is used or if it does not require authentication.</p> <p>ldap.attributes.fullname LDAP attribute name containing the user's full name (e.g. John Doe).</p> <p>ldap.attributes.login LDAP attribute name containing the user's identifier, to be typed into the login form ( e.g. jdoe).</p> <p>ldap.attributes.mail LDAP attribute name containing the user's e-mail address.</p> <p>ldap.user.objectclass LDAP object class to which users must belong.</p> <p>logging.config Path to file containing application log configuration. If the path is relative to the application's <code>WEB-INF/classes</code> directory, it must be prefixed with <code>classpath:/</code>.</p> <p>spring.batch.jdbc.initialize-schema String defining whether the Spring Batch initializer should be started. This value must be set to <code>never</code> in order to avoid creating unused tables in the database.</p> <p>spring.batch.job.enabled Boolean value defining whether scheduled tasks should be started automatically by Spring Batch. Must be set to <code>false</code>. (These tasks are started by the application.)</p> <p>spring.datasource.driver-class-name Qualified name of the database driver class to be used.</p> <p>spring.datasource.password Database login password.</p> <p>spring.datasource.url JDBC database connection string.</p> <p>spring.datasource.username Database login username</p> <p>spring.servlet.multipart.max-file-size Maximum size of each file that can be uploaded to the application. If you receive a 500 error when adding a large file to a request folder, it may be useful to increase this value, remembering to also increase <code>spring.servlet.multipart.max-request-size</code> if necessary.</p> <p>spring.servlet.multipart.max-request-size Maximum size of an upload request. This value must be greater than or equal to that of <code>spring.servlet.multipart.max-file-size</code>.</p> <p>spring.jpa.database-platform Qualified name of the dialect class to be used to communicate with the database.</p> <p>spring.jpa.hibernate.ddl-auto Value defining the application's behaviour with regard to database architecture. By default, this property is set to <code>update</code>, which allows tables to be generated automatically when the application is first started. Subsequently, you can speed up application start-up by setting this value to <code>none</code>. In this case, if a table or column has been accidentally deleted, it will not be automatically recreated, which may lead to operating problems. It is also recommended to set this value back to <code>update</code> when installing a new version of Extract, so that any database modifications can be applied.</p> <p>spring.jpa.properties.hibernate.id.new_generator_mappings Boolean value defining whether to use the latest ID generator version for database entries. Must be set to <code>true</code>.</p> <p>spring.jpa.show-sql Boolean value defining whether to display SQL generated by the application (e.g. in logs). We strongly advise you to leave this value at <code>false</code>.</p> <p>spring.thymeleaf.cache Boolean value defining whether the application's pages templates should be cached.</p> <p>spring.thymeleaf.enabled Boolean value defining whether to enable the templating engine. Must be set to <code>true</code>.</p> <p>spring.thymeleaf.encoding Encoding used by the application's pages templates.</p> <p>spring.thymeleaf.mode Template type used for application pages. Must be set to <code>HTML</code>.</p> <p>spring.thymeleaf.prefix Path to directory containing application page templates. If the path is relative to the application's <code>WEB-INF/classe</code>s directory, it must be prefixed with <code>classpath:/</code>.</p> <p>spring.thymeleaf.suffix Application page templates extension.</p> <p>spring.thymeleaf.template-resolver-order Templating engine priority for resolving application page templates. Must be set to <code>1</code>.</p> <p>table.page.size Number of lines to display in tables using pagination.</p>"},{"location":"getting-started/configure/#logging","title":"Logging","text":"<p>Info</p> <p>The logging application settings are found in the <code>logback-spring.xml</code> file at the root of the <code>WEB-INF\\classes</code> folder. They define what information should be written to the application logs. Changes are taken into account when the Tomcat Extract application is restarted.</p> <p>The setup takes place in two steps:</p> <ol> <li> <p>The setting of an <code>appender</code>, i.e. a location to which to send the information to be logged, and the format of this information. This can be a file, a database, a console, etc.</p> </li> <li> <p>The setting of a <code>logger</code>. A <code>logger</code> serves as the connection between a specific part of an application and one or more predefined <code>appenders</code>. A <code>logger</code> can simultaneously use multiple <code>appenders</code>, and a single <code>appender</code> can be shared by multiple <code>loggers</code>. The <code>logger</code> is identified by a name, corresponding to the package from which the class messages originate, encompassing any of its sub-packages. Additionally, the <code>logger</code> specifies a minimum level of messages to be logged. The root <code>logger</code> provides default logging behavior for all application classes, including  dependencies.</p> </li> </ol> <p>For more detailed information, please refer to the Logback help.</p>"},{"location":"getting-started/configure/#tomcat-user-access-rights","title":"Tomcat user access rights","text":"<p>Since Extract is a Tomcat application, it relies on the user running the Tomcat service to access various resources (network shares, local folders, etc.). It is therefore recommended to run the Tomcat service with an account having access to the necessary resources.</p>"},{"location":"getting-started/configure/#changing-the-tomcat-user-windows","title":"Changing the Tomcat user (Windows)","text":"<ol> <li>Open the Tomcat monitor (<code>tomcat8w.exe</code>, or <code>Start Menu &gt; All Programs &gt; Apache Tomcat &gt; Configure Tomcat</code>)</li> <li>Go to the <code>Log On</code> tab</li> <li>Check the <code>This account</code> option</li> <li>Edit the desired account information</li> <li>Click on OK</li> <li>Restart the Tomcat service</li> </ol>"},{"location":"getting-started/configure/#changing-the-tomcat-user-linux","title":"Changing the Tomcat user (Linux)","text":"<ol> <li>Edit the <code>/etc/systemd/system/tomcat9.service</code> file</li> <li>In the <code>Service</code> category, change the values of the <code>User</code> and <code>Group</code> keys to the user's name and group respectively.</li> <li>Save the file</li> <li>Restart the Tomcat service</li> </ol> <p>Warning</p> <p>The name of the file, its location and even the entire procedure may differ depending on the distribution used, the version of Tomcat and its installation mode.</p>"},{"location":"getting-started/configure/#tomcat-default-locale","title":"Tomcat default locale","text":"<p>In emails sent by Tomcat, dates are formatted according to Tomcat's locale. To set this, use the Duser.language and Duser.region parameters. For example : <pre><code>-Duser.language=fr -Duser.region=CH\n</code></pre></p> <p>These parameters are defined in the same way as for heap size (see Heap Size).</p>"},{"location":"getting-started/configure/#optimizing","title":"Optimizing","text":""},{"location":"getting-started/configure/#heap-size","title":"Heap size","text":"<p>The FME Desktop scripts run by Extract can lead to heavy heap usage. If you are using this plugin, it is recommended that you set the starting size of the heap (parameter <code>Xms</code>) to 1024 MB and the maximum size (parameter <code>Xmx</code>) to at least 2048 MB.</p> <p>These parameters are set in the <code>setenv.sh</code> (Linux) or <code>setenv.bat</code> (Windows) file in Tomcat's bin directory.</p> <p>If Tomcat is running as a Windows service, these parameters are defined in the <code>Java</code> tab of the service properties. This tab can only be accessed via the Tomcat monitor (<code>tomcat8w.exe</code>, or <code>Start Menu &gt; All Programs &gt; Apache Tomcat &gt; Configure Tomcat</code>). It is not visible via the Windows services management console (services.msc).</p> <p>In all cases, Tomcat must be restarted for the changes to take effect.</p>"},{"location":"getting-started/configure/#cache-size","title":"Cache Size","text":"<p>During startup, the logs may report that an item failed to load due to insufficient cache size, for example:</p> <pre><code>24-May-2017 10:52:57.029 WARNING [https-jsse-nio-8443-exec-10] org.apache.catalina.webresources.Cache.getResource Unable to add the resource at [/WEB-INF/classes/static/bower_components/select2/docs/_sass/vendor/font-awesome/_variables.scss] to the cache for web application [/extract] because there was insufficient free space available after evicting expired cache entries - consider increasing the maximum size of the cache\n</code></pre> <p>In this case, you can increase the maximum cache size by modifying the <code>context.xml</code> file in Tomcat's <code>conf</code> directory :</p> <pre><code>&lt;Context&gt;\n    &lt;!-- ... --&gt;\n\n    &lt;!-- Larger resources cache for EXTRACT --&gt;\n    &lt;Resources cacheMaxSize=\"102400\" /&gt;\n\n    &lt;!-- ... --&gt;\n&lt;/Context&gt;\n</code></pre>"},{"location":"getting-started/configure/#rule-field-size-limitation-matching-processes","title":"Rule field size limitation (matching processes)","text":"<p>Since the creation of text fields is problematic when handled solely with JPA (so that the application is not tied to a particular database system), It was decided to define the field that stores the rules linking requests to their corresponding processing as a <code>VARCHAR</code> data type. Unfortunately, this means limiting the number of characters in each rule to 65,000.</p> <p>Using PostgreSQL, however, you can remove this limitation by manually changing the type of the rule field in the rules table. The SQL command to make this change is :</p> <pre><code>ALTER TABLE rules ALTER COLUMN rule TYPE TEXT\n</code></pre> <p>Field values of existing records are preserved.</p> <p>Warning</p> <p>There is no guarantee that a similar modification will work with another DBMS.</p> <p> </p>"},{"location":"getting-started/customize/","title":"Customize","text":""},{"location":"getting-started/customize/#add-a-new-language","title":"Add a new language","text":"<p>You can set a new language for the Extract application user interface:</p> <ol> <li>Create a new directory in <code>WEB-INF\\classes\\static\\lang</code>, named after the two-character code of the desired language (e.g. <code>it</code>)</li> <li>Copy the contents of a previously defined language directory (<code>messages.properties</code> and <code>messages.js</code> files)</li> <li>Translate all messages stored in these files</li> </ol> <p>The date selector used on the home page can also be translated. Its language files are located in the <code>WEB-INF\\classes\\static\\lib\\bootstrap-datepicker\\dist\\locales</code> directory. If the desired language is not yet defined :</p> <ol> <li>Copy an existing language file by changing the language code in its name</li> <li>Translate all containing strings</li> </ol> <p>To apply the new language, update the <code>extract.i18n.language</code> property in the <code>WEB-INF\\classes\\application.properties</code> file, then restart the Tomcat application (see Application settings)</p>"},{"location":"getting-started/customize/#plugins","title":"Plugins","text":"<p>Info</p> <p>The type of connector providing the requests and the tasks that can be included in a process are managed by plugins that can be added, removed or updated independently of the application itself.</p>"},{"location":"getting-started/customize/#installing-or-updating-a-plugin","title":"Installing or updating a plugin","text":"<p>If a new connector type or a new task is available, simply place its JAR in the <code>WEB-INF/classes/connectors</code> (for connectors) or <code>WEB-INF/classes/task_processors</code> (for tasks) directory. When performing an upgrade, it is recommended to delete the JAR file of the previous version to prevent any potential conflicts.</p> <p>After making changes to the plugins, the Tomcat Extract application must be restarted.</p>"},{"location":"getting-started/customize/#development-of-a-new-connector-plugin","title":"Development of a new connector plugin","text":"<p>Info</p> <p>Documented sample code is available to help you create a new connector. You'll find it in the docs folder of the application repository : https://github.com/asit-asso/extract/tree/master/doc/extract-connector-sample.</p> <ul> <li>The project must be structured as a Java module, requiring the inclusion of a <code>module-info.java</code> file that declares its dependencies</li> <li>The new connector project must define a dependency on the <code>extract-interface</code> project</li> <li>The connector's main class must implement the <code>IConnector</code> interface</li> <li>The connector must declare a constructor without parameters</li> <li>The value returned by the <code>getCode</code> method must be unique across all Extract connectors</li> <li>The <code>getParams</code> method must return the connector's parameters as a JSON-formatted array. If the connector doesn't accept parameters, return an empty array (<code>[]</code>).</li> <li>Static files used by the connector (such as property files, language files, etc.) should be placed in the <code>resources/connectors/&lt;plugin code&gt;/</code> subdirectory.</li> <li>A file named <code>ch.asit_asso.extract.connectors.common.IConnector</code> must be created in the <code>resources/META-INF/services</code> subdirectory. The file should contain the fully qualified name of the main class.</li> </ul>"},{"location":"getting-started/customize/#development-of-a-new-task-plugin","title":"Development of a new task plugin","text":"<p>Info</p> <p>Documented sample code is available to help you create a new connector. You'll find it in the docs folder of the application repository : https://github.com/asit-asso/extract/tree/master/doc/extract-task-sample.</p>"},{"location":"getting-started/customize/#basemap","title":"Basemap","text":""},{"location":"getting-started/customize/#system-emails","title":"System emails","text":""},{"location":"getting-started/cybersecurity/","title":"Cybersecurity risk mitigations","text":""},{"location":"getting-started/cybersecurity/#security-recommendations-for-tomcat-9-deployments-linux","title":"Security recommendations for Tomcat 9 deployments (Linux)","text":""},{"location":"getting-started/cybersecurity/#security-recommendations-for-tomcat-9-deployments-windows-1011","title":"Security recommendations for Tomcat 9 deployments (Windows 10/11)","text":""},{"location":"getting-started/install/","title":"Install","text":""},{"location":"getting-started/install/#software-prerequisites","title":"Software prerequisites","text":"<ul> <li>64-bit Windows or Linus operating system</li> <li>Java 17 (Oracle or OpenJDK full version, not Headless)</li> <li>PostgreSQL 13 or above (Extract may work with older versions that are not supported anymore)</li> <li>Tomcat 9 (Extract is not currently compatible with Tomcat 10 due to the use of SpringBoot 2)</li> <li>A \u201cmodern\u201d web browser (&lt;2 years old) to access the application</li> </ul>"},{"location":"getting-started/install/#installation","title":"Installation","text":"<p>Info</p> <p>In the given paths, [ZIP] indicates the root of the delivered ZIP file in the release assets. Otherwise, relative paths are expressed in relation to the directory in which the application is deployed.</p> <p>Tip</p> <p>The latest release can be downloaded here.</p> <ol> <li>Create a PostgreSQL database to store the application data. Encoding must be UTF-8.</li> <li>The database must be accessible by a user with read, write and object creation/deletion privileges. The database content is automatically generated when the application is first started.</li> <li>Deploy the <code>[ZIP]\\application\\extract##x.x.x.war</code> file to Tomcat server. It is normal for any automatic start-up of the application after deployment to fail.</li> <li>In the folder of the deployed application, go to the <code>WEB-INF\\classes</code> directory and modify the <code>application.properties</code> file.</li> <li> <p>Modify the database connection properties:</p> <ul> <li>spring.datasource.url : JDBC database connection string</li> <li>spring.datasource.username : Database user name</li> <li>spring.datasource.password : Database user password</li> </ul> </li> <li> <p>(Optional:) If necessary, change the application language using the <code>extract.i18n.language</code> property in the <code>application.properties</code> file. The value must be the ISO code of the desired language (e.g. <code>en</code>). Translation files for this language must exist in a directory of the same name under <code>WEB-INF\\classes\\static\\lang</code>. To add a new language, please refer to Add a new language section.</p> </li> <li>Enter the application URL using the <code>application.external.url</code> property. The value of this property is used to generate links in notification e-mails.</li> <li>Enter a random 32-character ISO-8859-1 string for <code>database.encryption.secret</code> and <code>database.encryption.salt</code> properties. These strings are used as keys to encrypt certain database values.</li> <li>Save the file.</li> <li>In the same folder, log properties can be defined in the <code>logback-spring.xml</code> file.</li> <li>Start the application. </li> <li>Connect to the database. </li> <li>Execute the <code>[ZIP]\\sql\\update_db.sql</code> script to apply any database schema modifications that are not automatically performed by the application.</li> <li> <p>Connect to the application. When logging in for the first time, the user must create an admin account:</p> <p></p> </li> <li> <p>Fill in the fields and click <code>Cr\u00e9er le compte</code>.</p> </li> <li>Go to <code>Settings</code>.</li> <li>Enter the storage path. This is the directory in which data relating to request processing will be written. The Tomcat user must therefore have read and write rights to this directory.</li> <li>Enter SMTP server parameters for sending notifications.</li> <li>Click on <code>Enregistrer</code>.</li> <li>Congratulation ! The application is now operational.</li> </ol>"},{"location":"getting-started/install/#application-update","title":"Application Update","text":"<p>If you already have a previous version of the application installed, please follow the procedure below.</p> <ol> <li> <p>Back-up the following files so you don't have to redefine your configuration:</p> <ul> <li><code>WEB-INF\\classes\\application.properties</code></li> <li><code>WEB-INF\\classes\\logback-spring.xml</code></li> <li><code>WEB-INF\\classes\\static\\js\\requestMap\\map.custom.js</code> (if you've set it)</li> <li><code>WEB-INF\\classes\\templates\\email\\html\\*</code> (if you've customized the e-mail templates)</li> <li><code>WEB-INF\\classes\\static\\lang\\*\\message.properties</code></li> </ul> </li> <li> <p>Undeploy the existing Extract application.</p> </li> <li>For Tomcat on Windows: go to the directory where Tomcat is installed and delete all directories named <code>[digit]-extract</code> (e.g. <code>0-extract</code>, <code>1-extract</code>,...) under the <code>temp</code> sub-directory.</li> <li>Deploy the new WAR.</li> <li> <p>Compare the <code>WEB-INF\\classes\\application.properties</code> file with the one you backed-up, and transfer any new or modified properties to the latter.</p> <p>Updating to version 2.1</p> <p>Enter a random 32-character ISO-8859-1 string for <code>database.encryption.secret</code> and <code>database.encryption.salt</code> properties. These strings are used as keys to encrypt certain database values.</p> </li> <li> <p>Overwrite the folowing file with your backup :</p> <ul> <li><code>WEB-INF\\classes\\logback-spring.xml</code></li> </ul> </li> <li> <p>Copy your backup <code>map.custom.js</code> file (if set) to the <code>WEB-INF\\classes\\static\\js\\requestMap</code> directory.</p> <p>Updating to version 2.1</p> <p>The OpenLayers library used to display the map underwent a major update (to 9.1.0) when Extract was upgraded to version 2.1. The code used to register a projection system has changed (see the new version of the <code>map.custom.js</code> example file). Depending on the functionality used, further modifications may be necessary. Please refer to the official documentation if necessary: https://openlayers.org/en/v9.1.0/apidoc/</p> </li> <li> <p>Compare the e-mail templates in <code>WEB-INF\\classes\\templates\\email\\html\\</code> with those you've backed up, to merge any changes you've made with the new version.</p> </li> <li>Compare the language files in <code>WEB-INF\\classes\\static\\lang\\*\\</code> with those you've backed up, to merge any changes you've made with the new version.</li> <li>Restart the Tomcat Extract application to take account of the updated configuration files.</li> <li>Connect to the database.</li> <li>Run the <code>[ZIP]\\sql\\update_db.sql</code> script to apply any changes to the structure that are not made automatically by the application.</li> </ol>"},{"location":"getting-started/install/#server-migration","title":"Server Migration","text":"<p>Info</p> <p>The procedure below details how to proceed if the application needs to be migrated to other servers.</p>"},{"location":"getting-started/install/#actions-on-the-old-server","title":"Actions on the old server","text":"<ol> <li>Make a backup of the directory containing current processing data. The path of this directory is defined in the application parameters (<code>Param\u00e8tres</code> &gt; <code>Emplacement des fichiers temporaires</code>).</li> <li>Make a backup of the configuration and customization files as per step 1 in the Application Update section.</li> <li>If the database is also being migrated, make a dump of the Extract database.</li> </ol>"},{"location":"getting-started/install/#actions-on-the-new-server","title":"Actions on the new server","text":"<ol> <li>If the database has also been migrated, restore the Extract database dump.</li> <li>Restore backup of current processing data.</li> <li>Follow the update procedure from step 4</li> <li>If the path to the folder containing the current processing data has changed, don't forget to modify it in the application (<code>Param\u00e8tres</code> &gt; <code>Emplacement des fichiers temporaires</code>).  </li> </ol>"},{"location":"how-to/fme-flow/","title":"Set up an extraction using FME Flow","text":""},{"location":"how-to/fme-form/","title":"Set up an extraction using FME Form","text":""},{"location":"how-to/qgis-server-atlas/","title":"Set up an extraction using QGIS Server (atlas print layout)","text":""},{"location":"misc/community/","title":"Extract Community","text":""},{"location":"misc/viageo-test/","title":"viageo.ch Test Instance","text":""}]}